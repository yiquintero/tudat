name: build-and-test # workflow

# Triggers for the jobs in this workflow
on:
  push:
    branches: [ "master", "develop", "*/*" ]
  pull_request:
    branches: [ "master", "develop" ]

# Steps to build tudat
jobs:
  build-and-test-linux:

    runs-on: ubuntu-22.04 # GitHub hosted runner (machine) on which tudat will be built

    steps:
    - name: Install Boost
      run: |
        sudo apt-get install libboost-all-dev
        echo "Boost version"
        dpkg -s libboost-all-dev | grep 'Version'

    - name: Install Eigen 3.4.0
      run: |
        git clone https://gitlab.com/libeigen/eigen.git
        cd eigen
        git checkout 3.4.0
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=../eigeninstall/
        make -j 8
        make install
        cd ../../

    - name: Install tudat-resources
      run: |
        git clone https://github.com/tudat-team/tudat-resources.git
        cd tudat-resources
        git checkout master
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=../install/
        make -j 8
        make install
        cd ../../

    - name: Install CSpice
      run: |
        git clone https://github.com/tudat-team/cspice-cmake.git
        cd cspice-cmake
        git checkout master
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=../install/
        make -j 8
        make install
        cd ../../

    - name: Install Sofa
      run: |
        git clone https://github.com/tudat-team/sofa-cmake.git
        cd sofa-cmake
        git checkout master
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=../install/
        make -j 8
        make install
        cd ../../

    - name: Checkout tudat
      uses: actions/checkout@v4
      with:
        path: tudat

    - name: Build tudat
      run: |
        cd tudat
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=RELEASE \
          -DTudatResources_DIR="../../tudat-resources/install" \
          -DCSpice_DIR="../../cspice-cmake/install/lib/cmake/cspice" \
          -DSofa_DIR="../../sofa-cmake/install/lib/cmake/sofa/" \
          -DEigen3_DIR="../../eigen/eigeninstall/share/eigen3/cmake/"
        make -j 8




  # build-and-test:

  #   runs-on: ubuntu-22.04 # GitHub hosted runner (machine) on which lammps will be built

  #   steps:
  #   - name: Checkout OCTP
  #     uses: actions/checkout@v4
  #     with:
  #       path: octp

  #   - name: Checkout LAMMPS release branch
  #     uses: actions/checkout@v4
  #     with:
  #       repository: lammps/lammps
  #       ref: release
  #       path: lammps

  #   - name: Copy OCTP files to LAMMPS src directory
  #     run: |
  #       cp --verbose octp/src/* lammps/src/

  #   - name: Install OpenMPI in runner
  #     run: |
  #       sudo apt-get install openmpi-bin openmpi-common openmpi-doc libopenmpi-dev
  #       echo "mpi version"
  #       mpicc --showme:version

  #   - name: Build LAMMPS with OCTP plugin
  #     run: |
  #       cd lammps/src
  #       make yes-asphere
  #       make yes-body
  #       make yes-class2
  #       make yes-dipole
  #       make yes-granular
  #       make yes-kspace
  #       make yes-manybody
  #       make yes-molecule
  #       make yes-rigid
  #       make yes-shock
  #       make -j 8 mpi
  #       if ! [ -f lmp_mpi ]; then
  #         echo "::error:: lammps binary does not exist"
  #         exit 1
  #       fi
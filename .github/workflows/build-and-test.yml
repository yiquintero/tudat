# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: CMake on multiple platforms

on:
  push:
    branches: [ "master", "develop", "*/*" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build-and-test:

    # env:
    #     CACHE_NUMBER: 0

    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            label: win-64
            prefix: C:\Miniconda3\envs\tudat
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            label: linux-64
            prefix: /usr/share/miniconda3/envs/tudat
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            label: osx-64
            prefix: /usr/share/miniconda3/envs/tudat
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang

    steps:
    - name: Checkout tudat repo
      uses: actions/checkout@v3

    - name: Setup Mambaforge
      uses: conda-incubator/setup-miniconda@v2
      with:
         miniforge-variant: Mambaforge
         miniforge-version: latest
         activate-environment: tudat
         use-mamba: true

    # - name: Set cache date
    #   run: echo "DATE=$(date)" >> "$GITHUB_ENV"

    # - uses: actions/cache@v3
    #   with:
    #       path: ${{ matrix.prefix }}
    #       key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/environment.yml') }}-${{ env.CACHE_NUMBER }}
    #   id: cache

    - name: Update environment
      run: mamba env update -n tudat -f environment.yml
      # if: steps.cache.outputs.cache-hit != 'true'

    - name: Conda list
      shell: bash -l {0}
      run: conda list

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        key: ${{ matrix.os }}-${{ matrix.type }}

    - name: Configure CMake
      shell: bash -l {0}
      run: >
        cmake 
        -B "${{ github.workspace }}/build"
        -S "${{ github.workspace }}"
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DTUDAT_BUILD_GITHUB_ACTIONS=ON

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator). Use multiple cpu cores available in the runner.
      shell: bash -l {0}
      run: cmake --build "${{ github.workspace }}/build" --config "${{ matrix.build_type }}" -j8

    - name: Test
      working-directory: "${{ github.workspace }}/build"
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} -j8

    - name: Debug Tests
      if: always() && matrix.os == 'macos-latest'
      run: cat "${{ github.workspace }}/build/Testing/Temporary/LastTest.log"



